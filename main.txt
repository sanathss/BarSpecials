package com.example.sanat.barmate;

import android.Manifest;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Build;
import android.os.Handler;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.NotificationCompat;
import android.support.v4.app.NotificationManagerCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.format.Time;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.Switch;
import android.widget.TextView;

import org.w3c.dom.Text;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;


public class MainActivity extends AppCompatActivity {

    private InetAddress serverAddress;
    private Socket connect;

    private TextView status = null;
    private TextView display = null;
    private Thread thread;

    private int notificationID;

    final private ArrayList<String> special = new ArrayList<String>(0);

    public static final String CHANNEL_1_ID = "channel1";
    public static final String CHANNEL_2_ID = "channel2";

    private NotificationManagerCompat notificationManager;

    private LocationManager mLocationManager;

    private static final long LOCATION_REFRESH_TIME = 2000;
    private static final float LOCATION_REFRESH_DISTANCE = 1;

    private LocationListener mLocationListener = null;

    private static final int MY_PERMISSION_ACCESS_COARSE_LOCATION = 11;
    private static final int MY_PERMISSION_ACCESS_FINE_LOCATION = 12;

    private int counter = 0;

    private Location currentLocation;

    private LocationManager initialLocation;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        status = findViewById(R.id.status);
        display = findViewById(R.id.display);

        initialLocation = (LocationManager) getSystemService
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                (Context.LOCATION_SERVICE);
            // TODO: Consider calling
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_COARSE_LOCATION}, MY_PERMISSION_ACCESS_COARSE_LOCATION);
            ActivityCompat.requestPermissions(this, new String[] { Manifest.permission.ACCESS_FINE_LOCATION }, MY_PERMISSION_ACCESS_FINE_LOCATION);
            return;
        }
        currentLocation = initialLocation.getLastKnownLocation(LocationManager.PASSIVE_PROVIDER);
        TextView locationDisplay =  (TextView) findViewById(R.id.location);
        counter++;
        String display = counter + ": Latitude: " + currentLocation.getLatitude() + "; Longditude: " + currentLocation.getLongitude();
        locationDisplay.setText(display);

        locationUpdater();

        mLocationManager = (LocationManager) getSystemService(LOCATION_SERVICE);

        mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, LOCATION_REFRESH_TIME,
                LOCATION_REFRESH_DISTANCE, mLocationListener);

        createNotificationChannel();
        notificationManager = NotificationManagerCompat.from(this);

        //backgroundRequest();
        hitServer();
        Button button = (Button) findViewById(R.id.request);
        checkTime();

        button.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                // TODO Auto-generated method stub
                dummyRequest();
            }
        });
        Log.d("dummy","done");
        setupSwitch();

    }

    private void locationUpdater(){
        mLocationListener = new LocationListener() {
            @Override
            public void onLocationChanged(final Location location) {
                //your code here
                Log.d("location", "start");
                currentLocation = location;
                TextView locationDisplay =  (TextView) findViewById(R.id.location);
                TextView previousLocation = (TextView) findViewById(R.id.previous);
                counter++;
                previousLocation.setText(locationDisplay.getText());
                String display = counter + ": Latitude: " + location.getLatitude() + "; Longditude: " + location.getLongitude();
                locationDisplay.setText(display);
                dummyRequest();
            }

            @Override
            public void onStatusChanged(String s, int i, Bundle bundle) {

            }

            @Override
            public void onProviderEnabled(String s) {

            }

            @Override
            public void onProviderDisabled(String s) {

            }
        };
    }
    

    private void createNotificationChannel() {
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){
            NotificationChannel channel1 = new NotificationChannel(
                    CHANNEL_1_ID,
                    "Channel 1",
                    NotificationManager.IMPORTANCE_HIGH
            );
            channel1.setDescription("This is Channel 1");

            NotificationChannel channel2 = new NotificationChannel(
                    CHANNEL_2_ID,
                    "Channel 2",
                    NotificationManager.IMPORTANCE_LOW
            );
            channel2.setDescription("This is Channel 2");

            NotificationManager manager = getSystemService(NotificationManager.class);
            manager.createNotificationChannel(channel1);
            manager.createNotificationChannel(channel2);
        }
    }

    private void hitServer(){

        Intent activityIntent = new Intent(this, MainActivity.class);
        final PendingIntent contentIntent = PendingIntent.getActivity(this, 0, activityIntent, 0);

        Timer timer = new Timer();
        final Handler handler = new Handler();
        TimerTask doAsynchronousTask = new TimerTask() {
            @Override
            public void run() {
                handler.post(new Runnable() {
                    public void run() {
                        try {
                            Log.d("Timer task","start");
                            //Write your code here , which you want to execute periodically
                            dummyRequest();
                            if(special.size()>0){
                                Log.d("ArrayList", special.get(0));
                                Notification notification = new NotificationCompat.Builder(getApplicationContext(), CHANNEL_1_ID)
                                        .setSmallIcon(R.drawable.ic_icon)
                                        .setContentTitle("Barmate")
                                        .setContentText(special.get(0))
                                        .setPriority(NotificationCompat.PRIORITY_HIGH)
                                        .addAction(R.mipmap.ic_launcher, "Toast", contentIntent)
                                        .setColor(Color.BLUE)
                                        .setAutoCancel(true)
                                        .setOnlyAlertOnce(true)
                                        .build();
                                notificationManager.notify(1, notification);
                            }
                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                        }
                    }
                });
            }
        };
        timer.schedule(doAsynchronousTask, 0, 10000);
        Log.d("timer task", "Completed");

    }

    private void dummyRequest(){
        Thread dummy = new Thread() {
            @Override
            public void run() {
                try {
                    special.clear();
                    serverAddress = InetAddress.getByName("10.0.2.2");
                    connect = new Socket(serverAddress, 500);
                    Log.d("Socket", "Connect to socket server");
                    PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(connect.getOutputStream())), true);
                    //location;123456;-36.866628,174.776934
                    Log.d("location","start");
                    if(currentLocation==null){
                        Log.d("location","null");
                    }else {
                        Log.d("location","Not Null: " + currentLocation.getLongitude() + "; " + currentLocation.getLatitude());
                        out.println("location;123456;-36.866628,174.776934");
                    }
                    Log.d("Socket", "Request sent");
                    BufferedReader reader = new BufferedReader(new InputStreamReader(connect.getInputStream()));
                    String line;
                    line = reader.readLine();
                    Log.d("Socket", "Reader SetUp");

                    Log.d("Socket", line);
                    String[] specials = line.split("</special>");

                    for(int i = 0; i < specials.length; i++){
                        final String aSpecial = specials[i].substring(9, specials[i].length());
                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                TextView display = (TextView) findViewById(R.id.display);
                                Log.d("debug","text is changing");
                                display.setText(aSpecial);
                                Log.d("Value",aSpecial);
                                special.add(aSpecial);
                            }
                        });
                        Thread.sleep(2000);
                    }

                    Log.d("Socket", "Close Reader" + special.size());
                    reader.close();
                    out.close();
                    connect.close();
                    System.out.println("request accepted");

                } catch (UnknownHostException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        };
        dummy.start();
    }

    private boolean checkTime(){
        Calendar c = Calendar.getInstance();

        int Hr24=c.get(Calendar.HOUR_OF_DAY);
        int Min=c.get(Calendar.MINUTE);
        Log.d("time",Hr24 + ":" + Min);

        return false;
    }

    private void setupSwitch(){
        Switch activeSwitch = findViewById(R.id.activeSwitch);

       // activeSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
        //    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

       //     }
       // });
    }

    private void backgroundRequest(){
        thread = new Thread() {
            @Override
            public void run() {
                try {
                    while(true) {
                        sleep(250);

                        runOnUiThread(new Runnable() {
                            @Override
                            public void run() {
                                if(status.getText().length()==13) {
                                    status.setText("Sending");
                                }else{
                                    status.setText(status.getText() + ".");
                                }
                            }
                        });
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        };
    }


}
